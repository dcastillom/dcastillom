(function() {
  var isWin, path, spawn;

  ({spawn} = require("child_process"));

  isWin = process.platform === "win32";

  path = require("path");

  module.exports = (cmd, options) => {
    var child, sh, shFlag, stdio, tmp;
    if (isWin) {
      sh = "cmd";
      shFlag = "/c";
      cmd = cmd.replace(/"/g, "\"");
    } else {
      sh = "sh";
      shFlag = "-c";
    }
    if (options == null) {
      options = {};
    }
    if (options.cwd == null) {
      options.cwd = process.cwd();
    }
    if (options.env == null) {
      options.env = JSON.parse(JSON.stringify(process.env));
      tmp = options.env.PATH.split(path.delimiter);
      tmp.push(path.resolve(options.cwd, "./node_modules/.bin"));
      options.env.PATH = tmp.join(path.delimiter);
    }
    if (options.stdio == null) {
      stdio = ["pipe"];
      stdio.push(options.noOut ? "pipe" : "inherit");
      stdio.push(options.noErr ? "pipe" : "inherit");
      options.stdio = stdio;
    }
    options.windowsVerbatimArguments = isWin;
    options.detached = !isWin;
    if (options.Promise == null) {
      options.Promise = Promise;
    }
    child = spawn(sh, [shFlag, cmd], options);
    child.cmd = cmd;
    child.isClosed = false;
    child.isKilled = false;
    if (options.Promise) {
      child.closed = new options.Promise((resolve) => {
        return child.on("close", () => {
          child.isClosed = true;
          return resolve();
        });
      });
      child.killed = new options.Promise((resolve) => {
        return child.on("exit", (exitCode, signal) => {
          if (signal != null) {
            child.isKilled = true;
            return resolve();
          }
        });
      });
    } else {
      console.warn("better-spawn: no Promise lib supplied");
      child.on("close", () => {
        return child.isClosed = true;
      });
      child.on("exit", (exitCode, signal) => {
        if (signal != null) {
          return child.isKilled = true;
        }
      });
    }
    child.close = (signal = "SIGTERM") => {
      if (!(child.isClosed || child.isKilled)) {
        child.isKilled = true;
        if (isWin) {
          return child.kill(signal);
        } else {
          return process.kill(-child.pid, signal);
        }
      }
    };
    return child;
  };

}).call(this);
